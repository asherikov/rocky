name: windows-x64-Release-minimal

on: [push, pull_request, workflow_dispatch]

env:
  VCPKG_BINARY_SOURCES : 'clear;nuget,GitHub,readwrite'
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release
  VCPKG_VERSION: 'fd766eba2b4cf59c7123d46189be373e2cee959d'

jobs:

  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: ['windows-2019']
        include:
          - os: 'windows-2019'
            triplet: 'x64-windows'
            mono: ''
            VCPKG_WORKSPACE: 'c:/vcpkg_own'

    steps:
    - uses: actions/checkout@v3
      with:
        submodules: recursive
        
    - name: Check the Cache for the Vulkan SDK
      id: cache-vulkan-sdk
      uses: actions/cache@v3
      with:
        path: "C:\\VulkanSDK\\1.3.231.1"
        key: vulkan-sdk-1.3.231.1
      
    - name: Download the Vulkan SDK
      if: steps.cache-vulkan-sdk.outputs.cache-hit != 'true'
      shell: powershell
      run: Invoke-webrequest -uri https://sdk.lunarg.com/sdk/download/1.3.231.1/windows/VulkanSDK-1.3.231.1-Installer.exe -OutFile VulkanSDK.exe
    
    - name: Install the Vulkan SDK
      if: steps.cache-vulkan-sdk.outputs.cache-hit != 'true'
      shell: cmd
      run: .\VulkanSDK.exe --accept-licenses --default-answer --confirm-command install

    - name: Installing vcpkg (windows)
      shell: 'bash'
      run: |
        cmake -E make_directory ${{ matrix.VCPKG_WORKSPACE }}
        cd ${{ matrix.VCPKG_WORKSPACE }}
        # git clone --depth 1 --branch ${{env.VCPKG_VERSION}} https://github.com/microsoft/vcpkg
        git clone https://github.com/microsoft/vcpkg
        cd vcpkg
        git checkout ${{env.VCPKG_VERSION}}
        cd ..
        ./vcpkg/bootstrap-vcpkg.bat -disableMetrics
        ${{ matrix.VCPKG_WORKSPACE }}/vcpkg/vcpkg version

    - name: 'Setup NuGet Credentials'
      working-directory: ${{ matrix.VCPKG_WORKSPACE }}
      shell: 'bash'
      run: |
        ${{ matrix.mono }} `./vcpkg/vcpkg fetch nuget | tail -n 1` \
        sources add \
        -source "https://nuget.pkg.github.com/pelicanmapping/index.json" \
        -storepasswordincleartext \
        -name "GitHub" \
        -username "pelicanmapping" \
        -password "${{ secrets.GITHUB_TOKEN }}" 
        ${{ matrix.mono }} `./vcpkg/vcpkg fetch nuget | tail -n 1` \
          setapikey "${{ secrets.GITHUB_TOKEN }}" \
          -source "https://nuget.pkg.github.com/pelicanmapping/index.json"

    - name: Create Build Environment
      run: |
        cmake -E make_directory ${{runner.workspace}}/build

    - name: Configure CMake
      shell: bash
      working-directory: ${{ runner.workspace }}/build
      run: cmake $GITHUB_WORKSPACE -DWIN32_USE_MP=ON -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DROCKY_SUPPORTS_GDAL=OFF -DROCKY_SUPPORTS_MBTILES=OFF -DCMAKE_TOOLCHAIN_FILE=${{ matrix.VCPKG_WORKSPACE }}/vcpkg/scripts/buildsystems/vcpkg.cmake -DVCPKG_BUILD_TYPE=release -DVCPKG_MANIFEST_DIR=$GITHUB_WORKSPACE/vcpkg/minimal
      env:
        VULKAN_SDK: "C:\\VulkanSDK\\1.3.231.1"
      
    - name: 'Upload cmake configure log artifact'
      uses: actions/upload-artifact@v3
      if: ${{ failure() }}
      with:
        name: cmake-log
        path: |
          ${{ runner.workspace }}/build/CMakeCache.txt
        retention-days: 1

    - name: Build
      working-directory: ${{ runner.workspace }}/build
      shell: bash
      run: cmake --build . --config $BUILD_TYPE
